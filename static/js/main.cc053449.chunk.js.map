{"version":3,"sources":["components/Graph.js","App.js","serviceWorker.js","index.js"],"names":["Graph","fetch","then","res","json","data","this","drawChart","forEach","rider","splitTime","Time","split","Date","UTC","time","map","years","Year","svg","d3","append","attr","color","xScale","domain","range","width","yScale","height","xAxis","tickFormat","yAxis","tooltip","selectAll","enter","i","toISOString","slice","style","Doping","on","text","concat","Name","Nationality","pageY","pageX","call","padding","legend","d","react_default","a","createElement","id","Component","App","Graph_Graph","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc053449.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nexport default class Graph extends Component {\r\n\r\n  async componentDidMount() {\r\n    const data = await fetch('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json')\r\n      .then(res => res.json());\r\n    this.drawChart(data);\r\n  }\r\n\r\n  drawChart(data) {\r\n    data.forEach(rider => {\r\n      const splitTime = rider.Time.split(':');\r\n      rider.Time = new Date(Date.UTC(1970, 0, 1, 0, splitTime[0], splitTime[1]))\r\n    });\r\n\r\n    const time = data.map(rider => rider.Time),\r\n          years = data.map(rider => rider.Year),\r\n          height = 500,\r\n          width = 700,\r\n          padding = 40,\r\n          svg = d3.select('#graph')\r\n                  .append('svg')\r\n                  .attr('height', height)\r\n                  .attr('width', width),\r\n          color = d3.scaleOrdinal(d3.schemeCategory10),\r\n          xScale = d3.scaleLinear()\r\n                     .domain([d3.min(years) - 1, d3.max(years) + 1])\r\n                     .range([padding, width - padding]),\r\n          yScale = d3.scaleTime()\r\n                     .domain([d3.min(time), d3.max(time)])\r\n                     .range([padding, height - padding]),\r\n          xAxis = d3.axisBottom(xScale)\r\n                    .tickFormat(d3.format('d')),\r\n          yAxis = d3.axisLeft(yScale)\r\n                    .tickFormat(d3.timeFormat('%M:%S')),\r\n          tooltip = d3.select(\"#graph\")\r\n                      .append(\"div\")\r\n                      .attr(\"id\", \"tooltip\")\r\n    svg.selectAll('circle')\r\n       .data(data)\r\n       .enter()\r\n       .append('circle')\r\n       .attr('cy', (rider, i) => yScale(rider.Time)) \r\n       .attr('cx', (rider, i) => xScale(rider.Year))\r\n       .attr('r', 5)\r\n       .attr('data-xvalue', (rider, i) => rider.Year)\r\n       .attr('data-yvalue', (rider, i) => rider.Time.toISOString().split('.')[0].slice(-5))\r\n       .attr('class', 'dot')\r\n       .style('fill', (rider, i) => color(rider.Doping === ''))\r\n       .on('mouseover', (rider, i) => {\r\n         tooltip.text(`${rider.Name}: ${rider.Nationality}\\nYear: ${rider.Year}, Time: ${rider.Time.toISOString().split('.')[0].slice(-5)}`)\r\n                .attr('data-year', rider.Year)\r\n                .style(\"visibility\", \"visible\")\r\n       })\r\n       .on(\"mousemove\", () => {\r\n         tooltip.style(\"top\", (d3.event.pageY - 10)+\"px\")\r\n                .style(\"left\",(d3.event.pageX + 10)+\"px\");\r\n       })\r\n       .on(\"mouseout\", () => {\r\n         tooltip.style(\"visibility\", \"hidden\")\r\n       });\r\n\r\n    svg.append('g')\r\n       .attr('id', 'y-axis')\r\n       .attr('transform', `translate(${padding}, 0)`)\r\n       .call(yAxis);\r\n       \r\n    svg.append('g')\r\n       .attr('transform', `translate(0, ${height - padding})`)\r\n       .attr('id', 'x-axis')\r\n       .call(xAxis);\r\n    \r\n    svg.append('text')\r\n       .attr('x', width / 3)\r\n       .attr('y', padding)\r\n       .attr('id', 'title')\r\n       .text('Doping in Professional Cycling')\r\n    \r\n    svg.append('text')\r\n       .attr('x', width / 3)\r\n       .attr('y', padding * 1.5)\r\n       .attr('id', 'subtitle')\r\n       .text('35 Fastest times up Alpe d\\'Huez');\r\n    \r\n    const legend = svg.selectAll('.legend')\r\n                      .data(color.domain())\r\n                      .enter()\r\n                      .append('g')\r\n                      .attr('class', 'legend')\r\n                      .attr('id', 'legend')\r\n                      .attr('transform', (d, i) => `translate(0, ${height/2 - i * 20})`);\r\n   \r\n    legend.append('rect')\r\n          .attr('x', width - 18)\r\n          .attr('width', 18)\r\n          .attr('height', 18)\r\n          .style('fill', color);\r\n   \r\n    legend.append('text')\r\n          .attr('x', width - 24)\r\n          .attr('y', 9)\r\n          .attr('dy', '.35em')\r\n          .style('text-anchor', 'end')\r\n          .text(d => d ? 'Riders with doping allegations' : 'No doping allegations');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='graph'>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Graph from './components/Graph';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"display\">\n        <Graph />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}